---
import Base from "../../../layouts/Base.astro";
import { getCollection } from "astro:content";
import { TOPIC_METADATA } from "../../../content/config";
import Breadcrumbs from "../../../components/Breadcrumbs.astro";
import { useTranslations } from "../../../i18n/config";

const allPosts = await getCollection("blog");
const posts = allPosts
  .filter((p) => !p.data.draft && p.data.lang === 'es')
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Group posts by featured and regular
const featuredPosts = posts.filter((p) => p.data.featured);
const regularPosts = posts.filter((p) => !p.data.featured);

const t = useTranslations('es');
---

<Base title="Blog - Scripted">
  <!-- Breadcrumbs -->
  <Breadcrumbs items={[
    { label: t('nav.home'), href: "/es/" },
    { label: t('nav.blog') }
  ]} />
  
  <!-- Header -->
  <div class="mb-16 text-center">
    <h1 class="text-5xl font-bold mb-6">{t('nav.blog')}</h1>
    <p class="text-xl text-slate-600 max-w-2xl mx-auto">Mis pensamientos, experiencias y lo que se me ocurra escribir.</p>
    <div class="mt-8">
      <a 
        href="/es/topics/" 
        class="px-6 py-3 border-2 border-slate-300 rounded-lg font-semibold hover:bg-slate-50 transition-colors"
      >
        {t('topics.browseBy')}
      </a>
    </div>
  </div>

  <!-- Featured Posts -->
  {featuredPosts.length > 0 && (
    <section class="mb-16">
      <h2 class="text-3xl font-bold mb-8 text-center">{t('blog.featured')}</h2>
      <div class="grid gap-8 md:grid-cols-2">
        {featuredPosts.map((post) => {
          const topicMetadata = post.data.topic ? TOPIC_METADATA[post.data.topic as keyof typeof TOPIC_METADATA] : null;
          
          return (
            <article class="group h-full">
              <a href={`/es/blog/${post.slug}/`} class="block h-full">
                <div class="bg-white rounded-xl border border-slate-200 p-6 shadow-md hover:shadow-xl transition-all duration-300 hover:-translate-y-1 h-full flex flex-col">
                  <div class="flex items-center gap-2 mb-4 flex-wrap">
                    {topicMetadata && (
                      <span class={`px-3 py-1 rounded-full text-xs font-medium ${topicMetadata.color}`}>
                        {topicMetadata.icon} {topicMetadata.name}
                      </span>
                    )}
                    {post.data.tags.slice(0, 2).map((tag) => (
                      <span class="px-3 py-1 bg-slate-100 text-slate-600 text-xs rounded-full font-medium">
                        {tag}
                      </span>
                    ))}
                    {post.data.featured && (
                      <span class="px-3 py-1 bg-yellow-100 text-yellow-700 text-xs rounded-full font-medium">
                        Destacado
                      </span>
                    )}
                  </div>
                  <h3 class="text-xl font-bold mb-3 group-hover:text-blue-600 transition-colors line-clamp-2 flex-shrink-0">
                    {post.data.title}
                  </h3>
                  {post.data.description && (
                    <p class="text-slate-600 mb-4 line-clamp-3 leading-relaxed flex-grow">
                      {post.data.description}
                    </p>
                  )}
                  <div class="flex items-center justify-between text-sm text-slate-500 mt-auto">
                    <div class="flex items-center gap-4">
                      <span class="font-medium">{new Date(post.data.pubDate).toLocaleDateString('es-ES')}</span>
                      {post.data.author && (
                        <span>{t('blog.by')} {post.data.author}</span>
                      )}
                    </div>
                    {post.data.readingTime && (
                      <span>{post.data.readingTime} {t('blog.minRead')}</span>
                    )}
                  </div>
                </div>
              </a>
            </article>
          );
        })}
      </div>
    </section>
  )}

  <!-- All Posts -->
  <section>
    <h2 class="text-2xl font-semibold mb-6">
      {featuredPosts.length > 0 ? t('blog.allPosts') : t('blog.latest')}
    </h2>
    <div class="grid gap-6">
      {posts.map((post) => {
        const topicMetadata = post.data.topic ? TOPIC_METADATA[post.data.topic as keyof typeof TOPIC_METADATA] : null;
        
        return (
          <article class="group">
            <a href={`/es/blog/${post.slug}/`} class="block">
              <div class="bg-white rounded-xl border border-slate-200 p-6 shadow-md hover:shadow-xl transition-all duration-300 hover:-translate-y-1">
                <div class="flex items-start justify-between gap-6">
                  <div class="flex-1">
                    <div class="flex items-center gap-2 mb-3 flex-wrap">
                      {topicMetadata && (
                        <span class={`px-3 py-1 rounded-full text-xs font-medium ${topicMetadata.color}`}>
                          {topicMetadata.icon} {topicMetadata.name}
                        </span>
                      )}
                      {post.data.tags.slice(0, 2).map((tag) => (
                        <span class="px-3 py-1 bg-slate-100 text-slate-600 text-xs rounded-full font-medium">
                          {tag}
                        </span>
                      ))}
                      {post.data.featured && (
                        <span class="px-3 py-1 bg-yellow-100 text-yellow-700 text-xs rounded-full font-medium">
                          Destacado
                        </span>
                      )}
                    </div>
                    <h3 class="text-xl font-bold mb-2 group-hover:text-blue-600 transition-colors line-clamp-1">
                      {post.data.title}
                    </h3>
                    {post.data.description && (
                      <p class="text-slate-600 mb-3 line-clamp-2 leading-relaxed">
                        {post.data.description}
                      </p>
                    )}
                    <div class="flex items-center gap-4 text-sm text-slate-500">
                      <span class="font-medium">{new Date(post.data.pubDate).toLocaleDateString('es-ES')}</span>
                      {post.data.author && (
                        <span>{t('blog.by')} {post.data.author}</span>
                      )}
                      {post.data.readingTime && (
                        <span>{post.data.readingTime} {t('blog.minRead')}</span>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </a>
          </article>
        );
      })}
    </div>
  </section>
</Base>
