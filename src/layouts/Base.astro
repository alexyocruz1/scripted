---
import "../styles/global.css";
import { getLangFromUrl, useTranslations, languages, getRelativeUrl } from "../i18n/config";

const { 
  title = "Scripted - A Personal Blog", 
  description = "A personal blog where I share thoughts, experiences, and whatever interests me", 
  noIndex = false,
  image = "/og-image.svg",
  canonical = Astro.url.href
} = Astro.props;

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const isProd = import.meta.env.PROD;
const siteUrl = "https://scripted.qzz.io";
---
<html lang={lang}>
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="description" content={description} />
    <meta name="robots" content={noIndex ? "noindex, nofollow" : "index, follow"} />
    
    <!-- Language alternates for SEO -->
    <link rel="alternate" hreflang="en" href={getRelativeUrl(Astro.url, 'en')} />
    <link rel="alternate" hreflang="es" href={getRelativeUrl(Astro.url, 'es')} />
    <link rel="alternate" hreflang="x-default" href={getRelativeUrl(Astro.url, 'en')} />
    
    <!-- Favicon -->
    <link rel="icon" type="image/x-icon" href="/favicon_io/favicon.ico" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon_io/favicon-16x16.png" />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon_io/favicon-32x32.png" />
    <link rel="apple-touch-icon" sizes="180x180" href="/favicon_io/apple-touch-icon.png" />
    <link rel="manifest" href="/favicon_io/site.webmanifest" />
    
    <!-- Title -->
    <title>{title}</title>
    
    <!-- Canonical URL -->
    <link rel="canonical" href={canonical} />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content={canonical} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={new URL(image, siteUrl)} />
    <meta property="og:site_name" content="Scripted" />
    <meta property="og:locale" content={lang === 'es' ? 'es_ES' : 'en_US'} />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonical} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={new URL(image, siteUrl)} />
    
    <!-- Additional Meta -->
    <meta name="theme-color" content="#000000" />
    
    <!-- Styles -->
    <link rel="stylesheet" href="/pagefind/pagefind-ui.css" />
  </head>
  <body class="min-h-screen bg-white text-slate-900 flex flex-col">
    <header class="sticky top-0 backdrop-blur border-b border-slate-200/60 bg-white/75 z-50 shadow-sm">
      <nav class="max-w-7xl mx-auto px-4 py-4 flex items-center justify-between">
        <a href={lang === 'en' ? '/' : '/es/'} class="font-bold text-2xl text-gradient">Scripted</a>
        
        <!-- Desktop Navigation -->
        <div class="hidden md:flex items-center gap-8">
          <a href={lang === 'en' ? '/en/blog/' : '/es/blog/'} class="font-medium hover:text-blue-600 transition-colors">{t('nav.blog')}</a>
          <a href={lang === 'en' ? '/en/topics/' : '/es/topics/'} class="font-medium hover:text-blue-600 transition-colors">{t('nav.topics')}</a>
          <a href={lang === 'en' ? '/en/newsletter/' : '/es/newsletter/'} class="font-medium hover:text-blue-600 transition-colors">{t('nav.newsletter')}</a>
                      <a href="/rss.xml" class="font-medium hover:text-blue-600 transition-colors">RSS</a>
          
          <!-- Language Switcher -->
          <div class="relative group">
            <button class="flex items-center gap-1 px-3 py-2 text-sm font-medium text-slate-700 hover:text-blue-600 transition-colors">
              {languages[lang]}
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
              </svg>
            </button>
            <div class="absolute right-0 mt-2 w-32 bg-white border border-slate-200 rounded-lg shadow-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200">
              {Object.entries(languages).map(([code, name]) => (
                <a 
                  href={getRelativeUrl(Astro.url, code)}
                  class={`block px-4 py-2 text-sm hover:bg-slate-50 transition-colors ${code === lang ? 'text-blue-600 font-medium' : 'text-slate-700'}`}
                >
                  {name}
                </a>
              ))}
            </div>
          </div>
          
          <button id="search-button" class="px-4 py-2 border-2 border-slate-300 rounded-lg font-medium hover:bg-slate-50 transition-colors text-sm">{t('nav.search')}</button>
          <button id="test-search" class="px-2 py-2 border border-red-300 rounded text-xs hover:bg-red-50 transition-colors">Test</button>
        </div>

        <!-- Mobile Menu Button -->
        <button 
          id="mobile-menu-button" 
          class="md:hidden p-2 rounded-lg hover:bg-slate-100 transition-colors"
          aria-label="Toggle menu"
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
        </button>
      </nav>

      <!-- Mobile Menu -->
      <div id="mobile-menu" class="md:hidden hidden border-t border-slate-200 bg-white shadow-lg">
        <div class="px-4 py-4 space-y-3">
          <a href={lang === 'en' ? '/en/blog/' : '/es/blog/'} class="block py-3 px-2 font-medium hover:text-blue-600 transition-colors">{t('nav.blog')}</a>
          <a href={lang === 'en' ? '/en/topics/' : '/es/topics/'} class="block py-3 px-2 font-medium hover:text-blue-600 transition-colors">{t('nav.topics')}</a>
          <a href={lang === 'en' ? '/en/newsletter/' : '/es/newsletter/'} class="block py-3 px-2 font-medium hover:text-blue-600 transition-colors">{t('nav.newsletter')}</a>
          <a href="/rss.xml" class="block py-3 px-2 font-medium hover:text-blue-600 transition-colors">RSS</a>
          
          <!-- Mobile Language Switcher -->
          <div class="border-t border-slate-200 pt-3">
            <div class="text-sm font-medium text-slate-500 mb-2">{t('nav.language')}</div>
            <div class="space-y-1">
              {Object.entries(languages).map(([code, name]) => (
                <a 
                  href={getRelativeUrl(Astro.url, code)}
                  class={`block py-2 px-2 text-sm transition-colors ${code === lang ? 'text-blue-600 font-medium' : 'text-slate-700 hover:text-blue-600'}`}
                >
                  {name}
                </a>
              ))}
            </div>
          </div>
          
          <button id="mobile-search-button" class="w-full text-left py-3 px-2 border-2 border-slate-300 rounded-lg font-medium hover:bg-slate-50 transition-colors">{t('nav.search')}</button>
        </div>
      </div>
    </header>
    <main class="flex-1 max-w-7xl mx-auto px-4 py-8 w-full">
      <slot />
    </main>
    <footer class="border-t border-slate-200/60 bg-slate-50">
      <div class="max-w-7xl mx-auto px-4 py-12 text-sm text-slate-500">
        <div class="flex flex-col md:flex-row justify-between items-center gap-4">
          <p>&copy; {new Date().getFullYear()} Scripted. {t('footer.copyright')}.</p>
          <div class="flex items-center gap-6">
            <a href="/rss.xml" class="hover:text-blue-600 transition-colors font-medium">{t('footer.rss')}</a>
          </div>
        </div>
      </div>
    </footer>
    <div id="search" class="fixed inset-0 hidden bg-black/40 p-6">
      <div id="search-ui" class="mx-auto max-w-3xl bg-white rounded-xl p-4"></div>
    </div>
    <script src="/pagefind/pagefind-ui.js" type="text/javascript"></script>
    <script type="module">
      // Mobile menu toggle
      const mobileMenuButton = document.getElementById('mobile-menu-button');
      const mobileMenu = document.getElementById('mobile-menu');
      
      mobileMenuButton?.addEventListener('click', () => {
        mobileMenu?.classList.toggle('hidden');
      });

      // Close mobile menu when clicking outside
      document.addEventListener('click', (e) => {
        if (!mobileMenuButton?.contains(e.target as Node) && !mobileMenu?.contains(e.target as Node)) {
          mobileMenu?.classList.add('hidden');
        }
      });

      // Simple Pagefind UI toggle
      const open = () => {
        console.log('Search button clicked!');
        const searchModal = document.getElementById('search');
        const searchUI = document.getElementById('search-ui');
        
        if (searchModal && searchUI) {
          searchModal.classList.remove('hidden');
          console.log('Search modal opened');
          
          // Wait for PagefindUI to be available
          if (typeof window.PagefindUI !== 'undefined' && !window.__pagefind_inited) {
            try {
              console.log('Initializing PagefindUI...');
              new window.PagefindUI({ element: "#search-ui", showImages: false });
              window.__pagefind_inited = true;
              console.log('PagefindUI initialized successfully');
            } catch (error) {
              console.error('Error initializing PagefindUI:', error);
            }
          } else if (typeof window.PagefindUI === 'undefined') {
            console.log('PagefindUI not loaded yet, waiting...');
            // If PagefindUI isn't loaded yet, wait for it
            const checkPagefind = setInterval(() => {
              if (typeof window.PagefindUI !== 'undefined' && !window.__pagefind_inited) {
                try {
                  console.log('PagefindUI now available, initializing...');
                  new window.PagefindUI({ element: "#search-ui", showImages: false });
                  window.__pagefind_inited = true;
                  clearInterval(checkPagefind);
                  console.log('PagefindUI initialized successfully');
                } catch (error) {
                  console.error('Error initializing PagefindUI:', error);
                  clearInterval(checkPagefind);
                }
              }
            }, 100);
            
            // Timeout after 5 seconds
            setTimeout(() => {
              clearInterval(checkPagefind);
              console.log('PagefindUI initialization timed out');
            }, 5000);
          } else {
            console.log('PagefindUI already initialized');
          }
        } else {
          console.error('Search modal or UI elements not found');
        }
      };
      const close = (e) => {
        if (e.target.id === 'search') document.getElementById('search').classList.add('hidden');
      };
      document.getElementById('search-button')?.addEventListener('click', open);
      document.getElementById('mobile-search-button')?.addEventListener('click', open);
      document.getElementById('search')?.addEventListener('click', close);
      
      // Test button - just open modal without Pagefind
      document.getElementById('test-search')?.addEventListener('click', () => {
        console.log('Test button clicked!');
        const searchModal = document.getElementById('search');
        if (searchModal) {
          searchModal.classList.remove('hidden');
          console.log('Test modal opened');
        }
      });
    </script>
    <!-- Cloudflare Web Analytics -->
    <script defer src="https://static.cloudflareinsights.com/beacon.min.js" data-cf-beacon='{"token": "261078506663466783fa1a2392b17247"}'></script>
  </body>
</html>
